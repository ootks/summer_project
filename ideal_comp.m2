loadPackage("SymbolicPowers")

R = QQ[x,y,z,w]

-- First compute the ideal defining the union of 4 skew lines and 4 points in P^3
ideals = {
	ideal(2*x+3*y+2*w,y+z+3*w), -- line1
	ideal(y+z+3*w,2*x+4*z+3*w), -- line2
	ideal(2*x+4*z+3*w,3*x+y+w), -- line3
	ideal(3*x+y+w, 2*x+3*y+2*w), -- line4
	ideal(4*x+7*y+8*w, 2*x-y+2*w) -- line5
}
inter = intersect(ideals)
cubics = (ideal(x,y,z,w))^3
inter = intersect(inter, cubics)
interGens = first entries mingens inter
print(interGens)
-- Assert that inter is generated by cubics
for i to (length interGens)-1 do assert((first degree(interGens_i)) == 3)
f = sum(for i to (length interGens)-1 list (interGens_i)^2)

-- Ideal generated by degree 6 polynomials
sextics = (ideal(x,y,z,w))^6
-- Remove all polynomials of degree >= 7 from R
septics = (ideal(x,y,z,w))^7
phi = map(R/septics, R)

-- normal square
square = trim(intersect(inter * inter, sextics))
-- squareDim is the dimension of the vector space of sextics in square
squareDim = length (first entries mingens phi(square))
-- Remove all polynomials from the square
psi = map(R/square, R)

-- symbolic square
symbSquare = trim(intersect(symbolicPower(inter, 2), sextics))
-- symbDim is the dimension of the vector space of sextics in symbSquare
symbDim = length (first entries mingens phi(symbSquare))
-- There should be more in symb than in square.
assert(symbDim > squareDim)

-- Generator for symbSquare / square
x = first first entries mingens psi(symbSquare)
g = lift(x, R)

T = R[e]
-- Our purported nonnegative polynomial that is not SOS.
h = f - e*g
-- Write h to file.
"nonnegativemaybe" << mathML h << endl << close
